{"ast":null,"code":"'use client';\n\nimport { useRef, useEffect } from 'react';\nfunction useEventListener(type, listener, options) {\n  const ref = useRef();\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.addEventListener(type, listener, options);\n      return () => {\n        var _ref$current;\n        return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.removeEventListener(type, listener, options);\n      };\n    }\n    return void 0;\n  }, [listener, options]);\n  return ref;\n}\nexport { useEventListener };","map":{"version":3,"names":["useEventListener","type","listener","options","ref","useRef","useEffect","current","addEventListener","_ref$current","removeEventListener"],"sources":["/home/mark/Desktop/job/retail/retail/frontend/node_modules/@mantine/hooks/src/use-event-listener/use-event-listener.ts"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\nexport function useEventListener<K extends keyof HTMLElementEventMap, T extends HTMLElement = any>(\n  type: K,\n  listener: (this: HTMLDivElement, ev: HTMLElementEventMap[K]) => any,\n  options?: boolean | AddEventListenerOptions\n) {\n  const ref = useRef<T>();\n\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.addEventListener(type, listener as any, options);\n      return () => ref.current?.removeEventListener(type, listener as any, options);\n    }\n    return undefined;\n  }, [listener, options]);\n\n  return ref;\n}\n"],"mappings":";;;AAEO,SAASA,gBAAgBA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EACxD,MAAMC,GAAG,GAAGC,MAAM,EAAE;EACpBC,SAAS,CAAC,MAAM;IACd,IAAIF,GAAG,CAACG,OAAO,EAAE;MACfH,GAAG,CAACG,OAAO,CAACC,gBAAgB,CAACP,IAAI,EAAEC,QAAQ,EAAEC,OAAO,CAAC;MACrD,OAAO;QAAA,IAAAM,YAAA;QAAA,QAAAA,YAAA,GAAML,GAAG,CAACG,OAAO,cAAAE,YAAA,uBAAXA,YAAA,CAAaC,mBAAmB,CAACT,IAAI,EAAEC,QAAQ,EAAEC,OAAO,CAAC;MAAA;IACvE;IACD,OAAO,KAAK,CAAC;EACjB,CAAG,EAAE,CAACD,QAAQ,EAAEC,OAAO,CAAC,CAAC;EACvB,OAAOC,GAAG;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}