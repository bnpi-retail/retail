{"ast":null,"code":"'use client';\n\nimport { getPrimaryShade } from '../get-primary-shade/get-primary-shade.mjs';\nimport { isLightColor } from '../luminance/luminance.mjs';\nfunction parseThemeColor(_ref) {\n  let {\n    color,\n    theme,\n    colorScheme\n  } = _ref;\n  if (typeof color !== \"string\") {\n    throw new Error(\"[@mantine/core] Failed to parse color. Expected color to be a string, instead got \".concat(typeof color));\n  }\n  if (color === \"bright\") {\n    return {\n      color,\n      value: colorScheme === \"dark\" ? theme.white : theme.black,\n      shade: void 0,\n      isThemeColor: false,\n      isLight: isLightColor(colorScheme === \"dark\" ? theme.white : theme.black, theme.luminanceThreshold),\n      variable: \"--mantine-color-bright\"\n    };\n  }\n  if (color === \"dimmed\") {\n    return {\n      color,\n      value: colorScheme === \"dark\" ? theme.colors.dark[2] : theme.colors.gray[7],\n      shade: void 0,\n      isThemeColor: false,\n      isLight: isLightColor(colorScheme === \"dark\" ? theme.colors.dark[2] : theme.colors.gray[6], theme.luminanceThreshold),\n      variable: \"--mantine-color-dimmed\"\n    };\n  }\n  if (color === \"white\" || color === \"black\") {\n    return {\n      color,\n      value: color === \"white\" ? theme.white : theme.black,\n      shade: void 0,\n      isThemeColor: false,\n      isLight: isLightColor(color === \"white\" ? theme.white : theme.black, theme.luminanceThreshold),\n      variable: \"--mantine-color-\".concat(color)\n    };\n  }\n  const [_color, shade] = color.split(\".\");\n  const colorShade = shade ? Number(shade) : void 0;\n  const isThemeColor = (_color in theme.colors);\n  if (isThemeColor) {\n    const colorValue = colorShade !== void 0 ? theme.colors[_color][colorShade] : theme.colors[_color][getPrimaryShade(theme, colorScheme || \"light\")];\n    return {\n      color: _color,\n      value: colorValue,\n      shade: colorShade,\n      isThemeColor,\n      isLight: isLightColor(colorValue, theme.luminanceThreshold),\n      variable: shade ? \"--mantine-color-\".concat(_color, \"-\").concat(colorShade) : \"--mantine-color-\".concat(_color, \"-filled\")\n    };\n  }\n  return {\n    color,\n    value: color,\n    isThemeColor,\n    isLight: isLightColor(color, theme.luminanceThreshold),\n    shade: colorShade,\n    variable: void 0\n  };\n}\nexport { parseThemeColor };","map":{"version":3,"names":["parseThemeColor","_ref","color","theme","colorScheme","Error","concat","value","white","black","shade","isThemeColor","isLight","isLightColor","luminanceThreshold","variable","colors","dark","gray","_color","split","colorShade","Number","colorValue","getPrimaryShade"],"sources":["/home/mark/Desktop/job/retail/retail/frontend/node_modules/@mantine/core/src/core/MantineProvider/color-functions/parse-theme-color/parse-theme-color.ts"],"sourcesContent":["import type { CssVariable } from '../../../Box';\nimport type { MantineColorScheme, MantineColorShade, MantineTheme } from '../../theme.types';\nimport { getPrimaryShade } from '../get-primary-shade/get-primary-shade';\nimport { isLightColor } from '../luminance/luminance';\n\ninterface ParseThemeColorOptions {\n  color: unknown;\n  theme: MantineTheme;\n  colorScheme?: MantineColorScheme;\n}\n\ninterface ParseThemeColorResult {\n  color: string;\n  value: string;\n  shade: MantineColorShade | undefined;\n  variable: CssVariable | undefined;\n  isThemeColor: boolean;\n  isLight: boolean;\n}\n\nexport function parseThemeColor({\n  color,\n  theme,\n  colorScheme,\n}: ParseThemeColorOptions): ParseThemeColorResult {\n  if (typeof color !== 'string') {\n    throw new Error(\n      `[@mantine/core] Failed to parse color. Expected color to be a string, instead got ${typeof color}`\n    );\n  }\n\n  if (color === 'bright') {\n    return {\n      color,\n      value: colorScheme === 'dark' ? theme.white : theme.black,\n      shade: undefined,\n      isThemeColor: false,\n      isLight: isLightColor(\n        colorScheme === 'dark' ? theme.white : theme.black,\n        theme.luminanceThreshold\n      ),\n      variable: '--mantine-color-bright',\n    };\n  }\n\n  if (color === 'dimmed') {\n    return {\n      color,\n      value: colorScheme === 'dark' ? theme.colors.dark[2] : theme.colors.gray[7],\n      shade: undefined,\n      isThemeColor: false,\n      isLight: isLightColor(\n        colorScheme === 'dark' ? theme.colors.dark[2] : theme.colors.gray[6],\n        theme.luminanceThreshold\n      ),\n      variable: '--mantine-color-dimmed',\n    };\n  }\n\n  if (color === 'white' || color === 'black') {\n    return {\n      color,\n      value: color === 'white' ? theme.white : theme.black,\n      shade: undefined,\n      isThemeColor: false,\n      isLight: isLightColor(\n        color === 'white' ? theme.white : theme.black,\n        theme.luminanceThreshold\n      ),\n      variable: `--mantine-color-${color}`,\n    };\n  }\n\n  const [_color, shade] = color.split('.');\n  const colorShade = shade ? (Number(shade) as MantineColorShade) : undefined;\n  const isThemeColor = _color in theme.colors;\n\n  if (isThemeColor) {\n    const colorValue =\n      colorShade !== undefined\n        ? theme.colors[_color][colorShade]\n        : theme.colors[_color][getPrimaryShade(theme, colorScheme || 'light')];\n\n    return {\n      color: _color,\n      value: colorValue,\n      shade: colorShade,\n      isThemeColor,\n      isLight: isLightColor(colorValue, theme.luminanceThreshold),\n      variable: shade\n        ? `--mantine-color-${_color}-${colorShade}`\n        : `--mantine-color-${_color}-filled`,\n    };\n  }\n\n  return {\n    color,\n    value: color,\n    isThemeColor,\n    isLight: isLightColor(color, theme.luminanceThreshold),\n    shade: colorShade,\n    variable: undefined,\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}