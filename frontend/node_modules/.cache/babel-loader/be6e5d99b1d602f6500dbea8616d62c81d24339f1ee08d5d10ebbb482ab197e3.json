{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport '@mantine/hooks';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { useRandomClassName } from '../../core/Box/use-random-classname/use-random-classname.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { GridProvider } from './Grid.context.mjs';\nimport { GridCol } from './GridCol/GridCol.mjs';\nimport { GridVariables } from './GridVariables.mjs';\nimport classes from './Grid.module.css.mjs';\nconst defaultProps = {\n  gutter: \"md\",\n  grow: false,\n  columns: 12\n};\nconst varsResolver = createVarsResolver((_, _ref) => {\n  let {\n    justify,\n    align,\n    overflow\n  } = _ref;\n  return {\n    root: {\n      \"--grid-justify\": justify,\n      \"--grid-align\": align,\n      \"--grid-overflow\": overflow\n    }\n  };\n});\nconst Grid = factory((_props, ref) => {\n  const props = useProps(\"Grid\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    grow,\n    gutter,\n    columns,\n    align,\n    justify,\n    children,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"Grid\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  const responsiveClassName = useRandomClassName();\n  return /* @__PURE__ */React.createElement(GridProvider, {\n    value: {\n      getStyles,\n      grow,\n      columns\n    }\n  }, /* @__PURE__ */React.createElement(GridVariables, {\n    selector: \".\".concat(responsiveClassName),\n    ...props\n  }), /* @__PURE__ */React.createElement(Box, {\n    ref,\n    ...getStyles(\"root\", {\n      className: responsiveClassName\n    }),\n    ...others\n  }, /* @__PURE__ */React.createElement(\"div\", {\n    ...getStyles(\"inner\")\n  }, children)));\n});\nGrid.classes = classes;\nGrid.displayName = \"@mantine/core/Grid\";\nGrid.Col = GridCol;\nexport { Grid };","map":{"version":3,"names":["defaultProps","gutter","grow","columns","varsResolver","createVarsResolver","_","_ref","justify","align","overflow","root","Grid","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","children","others","getStyles","useStyles","name","classes","responsiveClassName","useRandomClassName","React","createElement","GridProvider","value","GridVariables","selector","concat","Box","displayName","Col","GridCol"],"sources":["/home/mark/Desktop/job/retail/retail/frontend/node_modules/@mantine/core/src/components/Grid/Grid.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  factory,\n  Factory,\n  MantineSpacing,\n  StyleProp,\n  StylesApiProps,\n  useProps,\n  useRandomClassName,\n  useStyles,\n} from '../../core';\nimport { GridProvider } from './Grid.context';\nimport { GridCol } from './GridCol/GridCol';\nimport { GridVariables } from './GridVariables';\nimport classes from './Grid.module.css';\n\nexport type GridStylesNames = 'root' | 'col' | 'inner';\nexport type GridCssVariables = {\n  root: '--grid-justify' | '--grid-align' | '--grid-overflow';\n};\n\nexport interface GridProps extends BoxProps, StylesApiProps<GridFactory>, ElementProps<'div'> {\n  /** Gutter between columns, key of `theme.spacing` or any valid CSS value, `'md'` by default */\n  gutter?: StyleProp<MantineSpacing>;\n\n  /** Determines whether columns in the last row should expand to fill all available space, `false` by default */\n  grow?: boolean;\n\n  /** Sets `justify-content`, `flex-start` by default */\n  justify?: React.CSSProperties['justifyContent'];\n\n  /** Sets `align-items`, `stretch` by default */\n  align?: React.CSSProperties['alignItems'];\n\n  /** Number of columns in each row, `12` by default */\n  columns?: number;\n\n  /** Sets `overflow` CSS property on the root element, `'visible'` by default */\n  overflow?: React.CSSProperties['overflow'];\n}\n\nexport type GridFactory = Factory<{\n  props: GridProps;\n  ref: HTMLDivElement;\n  stylesNames: GridStylesNames;\n  vars: GridCssVariables;\n  staticComponents: {\n    Col: typeof GridCol;\n  };\n}>;\n\nconst defaultProps: Partial<GridProps> = {\n  gutter: 'md',\n  grow: false,\n  columns: 12,\n};\n\nconst varsResolver = createVarsResolver<GridFactory>((_, { justify, align, overflow }) => ({\n  root: {\n    '--grid-justify': justify,\n    '--grid-align': align,\n    '--grid-overflow': overflow,\n  },\n}));\n\nexport const Grid = factory<GridFactory>((_props, ref) => {\n  const props = useProps('Grid', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    grow,\n    gutter,\n    columns,\n    align,\n    justify,\n    children,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<GridFactory>({\n    name: 'Grid',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const responsiveClassName = useRandomClassName();\n\n  return (\n    <GridProvider value={{ getStyles, grow, columns: columns! }}>\n      <GridVariables selector={`.${responsiveClassName}`} {...props} />\n      <Box ref={ref} {...getStyles('root', { className: responsiveClassName })} {...others}>\n        <div {...getStyles('inner')}>{children}</div>\n      </Box>\n    </GridProvider>\n  );\n});\n\nGrid.classes = classes;\nGrid.displayName = '@mantine/core/Grid';\nGrid.Col = GridCol;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAcA,MAAMA,YAAY,GAAG;EACnBC,MAAM,EAAE,IAAI;EACZC,IAAI,EAAE,KAAK;EACXC,OAAO,EAAE;AACX,CAAC;AACD,MAAMC,YAAY,GAAGC,kBAAkB,CAAC,CAACC,CAAC,EAAAC,IAAA;EAAA,IAAE;IAAEC,OAAO;IAAEC,KAAK;IAAEC;EAAQ,CAAE,GAAAH,IAAA;EAAA,OAAM;IAC5EI,IAAI,EAAE;MACJ,gBAAgB,EAAEH,OAAO;MACzB,cAAc,EAAEC,KAAK;MACrB,iBAAiB,EAAEC;IACpB;EACH,CAAC;AAAA,CAAC,CAAC;AACS,MAACE,IAAI,GAAGC,OAAO,CAAC,CAACC,MAAM,EAAEC,GAAG,KAAK;EAC3C,MAAMC,KAAK,GAAGC,QAAQ,CAAC,MAAM,EAAEjB,YAAY,EAAEc,MAAM,CAAC;EACpD,MAAM;IACJI,UAAU;IACVC,SAAS;IACTC,KAAK;IACLC,MAAM;IACNC,QAAQ;IACRC,IAAI;IACJrB,IAAI;IACJD,MAAM;IACNE,OAAO;IACPM,KAAK;IACLD,OAAO;IACPgB,QAAQ;IACR,GAAGC;EACJ,IAAGT,KAAK;EACT,MAAMU,SAAS,GAAGC,SAAS,CAAC;IAC1BC,IAAI,EAAE,MAAM;IACZC,OAAO;IACPb,KAAK;IACLG,SAAS;IACTC,KAAK;IACLF,UAAU;IACVG,MAAM;IACNC,QAAQ;IACRC,IAAI;IACJnB;EACJ,CAAG,CAAC;EACF,MAAM0B,mBAAmB,GAAGC,kBAAkB,EAAE;EAChD,sBAAuBC,KAAK,CAACC,aAAa,CAACC,YAAY,EAAE;IAAEC,KAAK,EAAE;MAAET,SAAS;MAAExB,IAAI;MAAEC;IAAO;EAAI,kBAAkB6B,KAAK,CAACC,aAAa,CAACG,aAAa,EAAE;IAAEC,QAAQ,MAAAC,MAAA,CAAMR,mBAAmB,CAAE;IAAE,GAAGd;EAAK,CAAE,CAAC,EAAkB,eAAAgB,KAAK,CAACC,aAAa,CAACM,GAAG,EAAE;IAAExB,GAAG;IAAE,GAAGW,SAAS,CAAC,MAAM,EAAE;MAAEP,SAAS,EAAEW;IAAqB,EAAC;IAAE,GAAGL;EAAQ,kBAAkBO,KAAK,CAACC,aAAa,CAAC,KAAK,EAAE;IAAE,GAAGP,SAAS,CAAC,OAAO;EAAG,GAAEF,QAAQ,CAAC,CAAC,CAAC;AACnZ,CAAC,CAAE;AACHZ,IAAI,CAACiB,OAAO,GAAGA,OAAO;AACtBjB,IAAI,CAAC4B,WAAW,GAAG,oBAAoB;AACvC5B,IAAI,CAAC6B,GAAG,GAAGC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}