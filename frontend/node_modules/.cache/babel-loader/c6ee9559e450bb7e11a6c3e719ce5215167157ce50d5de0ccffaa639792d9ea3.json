{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport cx from 'clsx';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport { getSize } from '../../core/utils/get-size/get-size.mjs';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport { useResolvedStylesApi } from '../../core/styles-api/use-resolved-styles-api/use-resolved-styles-api.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport { extractStyleProps } from '../../core/Box/style-props/extract-style-props/extract-style-props.mjs';\nimport '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { ActionIcon } from '../ActionIcon/ActionIcon.mjs';\nimport '../ActionIcon/ActionIconGroup/ActionIconGroup.mjs';\nimport { Input } from '../Input/Input.mjs';\nimport '../Input/InputWrapper/InputWrapper.mjs';\nimport '../Input/InputDescription/InputDescription.mjs';\nimport '../Input/InputError/InputError.mjs';\nimport '../Input/InputLabel/InputLabel.mjs';\nimport '../Input/InputPlaceholder/InputPlaceholder.mjs';\nimport '../Input/InputWrapper.context.mjs';\nimport { InputBase } from '../InputBase/InputBase.mjs';\nimport { PasswordToggleIcon } from './PasswordToggleIcon.mjs';\nimport classes from './PasswordInput.module.css.mjs';\nconst defaultProps = {\n  visibilityToggleIcon: PasswordToggleIcon\n};\nconst varsResolver = createVarsResolver((_, _ref) => {\n  let {\n    size\n  } = _ref;\n  return {\n    root: {\n      \"--psi-icon-size\": getSize(size, \"psi-icon-size\"),\n      \"--psi-button-size\": getSize(size, \"psi-button-size\")\n    }\n  };\n});\nconst PasswordInput = factory((_props, ref) => {\n  const props = useProps(\"PasswordInput\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    required,\n    error,\n    leftSection,\n    disabled,\n    id,\n    variant,\n    inputContainer,\n    description,\n    label,\n    size,\n    errorProps,\n    descriptionProps,\n    labelProps,\n    withAsterisk,\n    inputWrapperOrder,\n    wrapperProps,\n    radius,\n    rightSection,\n    rightSectionWidth,\n    rightSectionPointerEvents,\n    leftSectionWidth,\n    visible,\n    defaultVisible,\n    onVisibilityChange,\n    visibilityToggleIcon,\n    visibilityToggleButtonProps,\n    rightSectionProps,\n    leftSectionProps,\n    leftSectionPointerEvents,\n    ...others\n  } = props;\n  const uuid = useId(id);\n  const [_visible, setVisibility] = useUncontrolled({\n    value: visible,\n    defaultValue: defaultVisible,\n    finalValue: false,\n    onChange: onVisibilityChange\n  });\n  const toggleVisibility = () => setVisibility(!_visible);\n  const getStyles = useStyles({\n    name: \"PasswordInput\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  const {\n    resolvedClassNames,\n    resolvedStyles\n  } = useResolvedStylesApi({\n    classNames,\n    styles,\n    props\n  });\n  const {\n    styleProps,\n    rest\n  } = extractStyleProps(others);\n  const VisibilityToggleIcon = visibilityToggleIcon;\n  const visibilityToggleButton = /* @__PURE__ */React.createElement(ActionIcon, {\n    ...getStyles(\"visibilityToggle\"),\n    disabled,\n    radius,\n    \"aria-hidden\": !visibilityToggleButtonProps,\n    tabIndex: -1,\n    ...visibilityToggleButtonProps,\n    variant: \"subtle\",\n    color: \"gray\",\n    unstyled,\n    onMouseDown: event => {\n      var _visibilityToggleButt;\n      event.preventDefault();\n      visibilityToggleButtonProps === null || visibilityToggleButtonProps === void 0 || (_visibilityToggleButt = visibilityToggleButtonProps.onMouseDown) === null || _visibilityToggleButt === void 0 || _visibilityToggleButt.call(visibilityToggleButtonProps, event);\n      toggleVisibility();\n    },\n    onKeyDown: event => {\n      var _visibilityToggleButt2;\n      visibilityToggleButtonProps === null || visibilityToggleButtonProps === void 0 || (_visibilityToggleButt2 = visibilityToggleButtonProps.onKeyDown) === null || _visibilityToggleButt2 === void 0 || _visibilityToggleButt2.call(visibilityToggleButtonProps, event);\n      if (event.key === \" \") {\n        event.preventDefault();\n        toggleVisibility();\n      }\n    }\n  }, /* @__PURE__ */React.createElement(VisibilityToggleIcon, {\n    reveal: _visible\n  }));\n  return /* @__PURE__ */React.createElement(Input.Wrapper, {\n    required,\n    id: uuid,\n    label,\n    error,\n    description,\n    size,\n    classNames: resolvedClassNames,\n    styles: resolvedStyles,\n    __staticSelector: \"PasswordInput\",\n    errorProps,\n    descriptionProps,\n    unstyled,\n    withAsterisk,\n    inputWrapperOrder,\n    inputContainer,\n    variant,\n    labelProps: {\n      ...labelProps,\n      htmlFor: uuid\n    },\n    ...getStyles(\"root\"),\n    ...styleProps,\n    ...wrapperProps\n  }, /* @__PURE__ */React.createElement(Input, {\n    component: \"div\",\n    error,\n    leftSection,\n    size,\n    classNames: {\n      ...resolvedClassNames,\n      input: cx(classes.input, resolvedClassNames.input)\n    },\n    styles: resolvedStyles,\n    radius,\n    disabled,\n    __staticSelector: \"PasswordInput\",\n    rightSectionWidth,\n    rightSection: rightSection !== null && rightSection !== void 0 ? rightSection : visibilityToggleButton,\n    variant,\n    unstyled,\n    leftSectionWidth,\n    rightSectionPointerEvents: rightSectionPointerEvents || \"all\",\n    rightSectionProps,\n    leftSectionProps,\n    leftSectionPointerEvents,\n    withAria: false\n  }, /* @__PURE__ */React.createElement(\"input\", {\n    required,\n    \"data-invalid\": !!error || void 0,\n    \"data-with-left-section\": !!leftSection || void 0,\n    ...getStyles(\"innerInput\"),\n    disabled,\n    id: uuid,\n    ref,\n    ...rest,\n    autoComplete: rest.autoComplete || \"off\",\n    type: _visible ? \"text\" : \"password\"\n  })));\n});\nPasswordInput.classes = {\n  ...InputBase.classes,\n  ...classes\n};\nPasswordInput.displayName = \"@mantine/core/PasswordInput\";\nexport { PasswordInput };","map":{"version":3,"names":["defaultProps","visibilityToggleIcon","PasswordToggleIcon","varsResolver","createVarsResolver","_","_ref","size","root","getSize","PasswordInput","factory","_props","ref","props","useProps","classNames","className","style","styles","unstyled","vars","required","error","leftSection","disabled","id","variant","inputContainer","description","label","errorProps","descriptionProps","labelProps","withAsterisk","inputWrapperOrder","wrapperProps","radius","rightSection","rightSectionWidth","rightSectionPointerEvents","leftSectionWidth","visible","defaultVisible","onVisibilityChange","visibilityToggleButtonProps","rightSectionProps","leftSectionProps","leftSectionPointerEvents","others","uuid","useId","_visible","setVisibility","useUncontrolled","value","defaultValue","finalValue","onChange","toggleVisibility","getStyles","useStyles","name","classes","resolvedClassNames","resolvedStyles","useResolvedStylesApi","styleProps","rest","extractStyleProps","VisibilityToggleIcon","visibilityToggleButton","React","createElement","ActionIcon","tabIndex","color","onMouseDown","event","_visibilityToggleButt","preventDefault","call","onKeyDown","_visibilityToggleButt2","key","reveal","Input","Wrapper","__staticSelector","htmlFor","component","input","cx","withAria","autoComplete","type","InputBase","displayName"],"sources":["/home/mark/Desktop/job/retail/retail/frontend/node_modules/@mantine/core/src/components/PasswordInput/PasswordInput.tsx"],"sourcesContent":["import React from 'react';\nimport cx from 'clsx';\nimport { useId, useUncontrolled } from '@mantine/hooks';\nimport {\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  extractStyleProps,\n  factory,\n  Factory,\n  getSize,\n  StylesApiProps,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '../../core';\nimport { ActionIcon } from '../ActionIcon';\nimport { __BaseInputProps, __InputStylesNames, Input, InputVariant } from '../Input';\nimport { InputBase } from '../InputBase';\nimport { PasswordToggleIcon } from './PasswordToggleIcon';\nimport classes from './PasswordInput.module.css';\n\nexport type PasswordInputStylesNames =\n  | 'root'\n  | 'visibilityToggle'\n  | 'innerInput'\n  | __InputStylesNames;\nexport type PasswordInputCssVariables = {\n  root: '--psi-icon-size' | '--psi-button-size';\n};\n\nexport interface PasswordInputProps\n  extends BoxProps,\n    __BaseInputProps,\n    StylesApiProps<PasswordInputFactory>,\n    ElementProps<'input', 'size'> {\n  /** A component to replace visibility toggle icon */\n  visibilityToggleIcon?: React.FC<{ reveal: boolean }>;\n\n  /** Props passed down to the visibility toggle button */\n  visibilityToggleButtonProps?: Record<string, any>;\n\n  /** Determines whether input content should be visible */\n  visible?: boolean;\n\n  /** Determines whether input content should be visible by default */\n  defaultVisible?: boolean;\n\n  /** Called when visibility changes */\n  onVisibilityChange?: (visible: boolean) => void;\n}\n\nexport type PasswordInputFactory = Factory<{\n  props: PasswordInputProps;\n  ref: HTMLInputElement;\n  stylesNames: PasswordInputStylesNames;\n  vars: PasswordInputCssVariables;\n  variant: InputVariant;\n}>;\n\nconst defaultProps: Partial<PasswordInputProps> = {\n  visibilityToggleIcon: PasswordToggleIcon,\n};\n\nconst varsResolver = createVarsResolver<PasswordInputFactory>((_, { size }) => ({\n  root: {\n    '--psi-icon-size': getSize(size, 'psi-icon-size'),\n    '--psi-button-size': getSize(size, 'psi-button-size'),\n  },\n}));\n\nexport const PasswordInput = factory<PasswordInputFactory>((_props, ref) => {\n  const props = useProps('PasswordInput', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    required,\n    error,\n    leftSection,\n    disabled,\n    id,\n    variant,\n    inputContainer,\n    description,\n    label,\n    size,\n    errorProps,\n    descriptionProps,\n    labelProps,\n    withAsterisk,\n    inputWrapperOrder,\n    wrapperProps,\n    radius,\n    rightSection,\n    rightSectionWidth,\n    rightSectionPointerEvents,\n    leftSectionWidth,\n    visible,\n    defaultVisible,\n    onVisibilityChange,\n    visibilityToggleIcon,\n    visibilityToggleButtonProps,\n    rightSectionProps,\n    leftSectionProps,\n    leftSectionPointerEvents,\n    ...others\n  } = props;\n\n  const uuid = useId(id);\n\n  const [_visible, setVisibility] = useUncontrolled({\n    value: visible,\n    defaultValue: defaultVisible,\n    finalValue: false,\n    onChange: onVisibilityChange,\n  });\n\n  const toggleVisibility = () => setVisibility(!_visible);\n\n  const getStyles = useStyles<PasswordInputFactory>({\n    name: 'PasswordInput',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<PasswordInputFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const { styleProps, rest } = extractStyleProps(others);\n  const VisibilityToggleIcon = visibilityToggleIcon!;\n\n  const visibilityToggleButton = (\n    <ActionIcon<'button'>\n      {...getStyles('visibilityToggle')}\n      disabled={disabled}\n      radius={radius}\n      aria-hidden={!visibilityToggleButtonProps}\n      tabIndex={-1}\n      {...visibilityToggleButtonProps}\n      variant=\"subtle\"\n      color=\"gray\"\n      unstyled={unstyled}\n      onMouseDown={(event) => {\n        event.preventDefault();\n        visibilityToggleButtonProps?.onMouseDown?.(event);\n        toggleVisibility();\n      }}\n      onKeyDown={(event) => {\n        visibilityToggleButtonProps?.onKeyDown?.(event);\n        if (event.key === ' ') {\n          event.preventDefault();\n          toggleVisibility();\n        }\n      }}\n    >\n      <VisibilityToggleIcon reveal={_visible} />\n    </ActionIcon>\n  );\n\n  return (\n    <Input.Wrapper\n      required={required}\n      id={uuid}\n      label={label}\n      error={error}\n      description={description}\n      size={size}\n      classNames={resolvedClassNames}\n      styles={resolvedStyles}\n      __staticSelector=\"PasswordInput\"\n      errorProps={errorProps}\n      descriptionProps={descriptionProps}\n      unstyled={unstyled}\n      withAsterisk={withAsterisk}\n      inputWrapperOrder={inputWrapperOrder}\n      inputContainer={inputContainer}\n      variant={variant}\n      labelProps={{ ...labelProps, htmlFor: uuid }}\n      {...getStyles('root')}\n      {...styleProps}\n      {...wrapperProps}\n    >\n      <Input<'div'>\n        component=\"div\"\n        error={error}\n        leftSection={leftSection}\n        size={size}\n        classNames={{ ...resolvedClassNames, input: cx(classes.input, resolvedClassNames.input) }}\n        styles={resolvedStyles}\n        radius={radius}\n        disabled={disabled}\n        __staticSelector=\"PasswordInput\"\n        rightSectionWidth={rightSectionWidth}\n        rightSection={rightSection ?? visibilityToggleButton}\n        variant={variant}\n        unstyled={unstyled}\n        leftSectionWidth={leftSectionWidth}\n        rightSectionPointerEvents={rightSectionPointerEvents || 'all'}\n        rightSectionProps={rightSectionProps}\n        leftSectionProps={leftSectionProps}\n        leftSectionPointerEvents={leftSectionPointerEvents}\n        withAria={false}\n      >\n        <input\n          required={required}\n          data-invalid={!!error || undefined}\n          data-with-left-section={!!leftSection || undefined}\n          {...getStyles('innerInput')}\n          disabled={disabled}\n          id={uuid}\n          ref={ref}\n          {...rest}\n          autoComplete={rest.autoComplete || 'off'}\n          type={_visible ? 'text' : 'password'}\n        />\n      </Input>\n    </Input.Wrapper>\n  );\n});\n\nPasswordInput.classes = { ...InputBase.classes, ...classes };\nPasswordInput.displayName = '@mantine/core/PasswordInput';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}