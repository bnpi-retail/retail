{"ast":null,"code":"'use client';\n\nimport { useState, useRef, useCallback, useEffect } from 'react';\nfunction getFullscreenElement() {\n  const _document = window.document;\n  const fullscreenElement = _document.fullscreenElement || _document.webkitFullscreenElement || _document.mozFullScreenElement || _document.msFullscreenElement;\n  return fullscreenElement;\n}\nasync function exitFullscreen() {\n  const _document = window.document;\n  if (typeof _document.exitFullscreen === \"function\") return _document.exitFullscreen();\n  if (typeof _document.msExitFullscreen === \"function\") return _document.msExitFullscreen();\n  if (typeof _document.webkitExitFullscreen === \"function\") return _document.webkitExitFullscreen();\n  if (typeof _document.mozCancelFullScreen === \"function\") return _document.mozCancelFullScreen();\n  return null;\n}\nasync function enterFullScreen(element) {\n  var _element$requestFulls, _element$msRequestFul, _element$webkitEnterF, _element$webkitReques, _element$mozRequestFu;\n  const _element = element;\n  return ((_element$requestFulls = _element.requestFullscreen) === null || _element$requestFulls === void 0 ? void 0 : _element$requestFulls.call(_element)) || ((_element$msRequestFul = _element.msRequestFullscreen) === null || _element$msRequestFul === void 0 ? void 0 : _element$msRequestFul.call(_element)) || ((_element$webkitEnterF = _element.webkitEnterFullscreen) === null || _element$webkitEnterF === void 0 ? void 0 : _element$webkitEnterF.call(_element)) || ((_element$webkitReques = _element.webkitRequestFullscreen) === null || _element$webkitReques === void 0 ? void 0 : _element$webkitReques.call(_element)) || ((_element$mozRequestFu = _element.mozRequestFullscreen) === null || _element$mozRequestFu === void 0 ? void 0 : _element$mozRequestFu.call(_element));\n}\nconst prefixes = [\"\", \"webkit\", \"moz\", \"ms\"];\nfunction addEvents(element, _ref2) {\n  let {\n    onFullScreen,\n    onError\n  } = _ref2;\n  prefixes.forEach(prefix => {\n    element.addEventListener(\"\".concat(prefix, \"fullscreenchange\"), onFullScreen);\n    element.addEventListener(\"\".concat(prefix, \"fullscreenerror\"), onError);\n  });\n  return () => {\n    prefixes.forEach(prefix => {\n      element.removeEventListener(\"\".concat(prefix, \"fullscreenchange\"), onFullScreen);\n      element.removeEventListener(\"\".concat(prefix, \"fullscreenerror\"), onError);\n    });\n  };\n}\nfunction useFullscreen() {\n  const [fullscreen, setFullscreen] = useState(false);\n  const _ref = useRef();\n  const handleFullscreenChange = useCallback(event => {\n    setFullscreen(event.target === getFullscreenElement());\n  }, [setFullscreen]);\n  const handleFullscreenError = useCallback(event => {\n    setFullscreen(false);\n    console.error(\"[@mantine/hooks] use-fullscreen: Error attempting full-screen mode method: \".concat(event, \" (\").concat(event.target, \")\"));\n  }, [setFullscreen]);\n  const toggle = useCallback(async () => {\n    if (!getFullscreenElement()) {\n      await enterFullScreen(_ref.current);\n    } else {\n      await exitFullscreen();\n    }\n  }, []);\n  const ref = useCallback(element => {\n    if (element === null) {\n      _ref.current = window.document.documentElement;\n    } else {\n      _ref.current = element;\n    }\n  }, []);\n  useEffect(() => {\n    if (!_ref.current && window.document) {\n      _ref.current = window.document.documentElement;\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError\n      });\n    }\n    if (_ref.current) {\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError\n      });\n    }\n    return void 0;\n  }, []);\n  return {\n    ref,\n    toggle,\n    fullscreen\n  };\n}\nexport { useFullscreen };","map":{"version":3,"names":["getFullscreenElement","_document","window","document","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","exitFullscreen","msExitFullscreen","webkitExitFullscreen","mozCancelFullScreen","enterFullScreen","element","_element$requestFulls","_element$msRequestFul","_element$webkitEnterF","_element$webkitReques","_element$mozRequestFu","_element","requestFullscreen","call","msRequestFullscreen","webkitEnterFullscreen","webkitRequestFullscreen","mozRequestFullscreen","prefixes","addEvents","_ref2","onFullScreen","onError","forEach","prefix","addEventListener","concat","removeEventListener","useFullscreen","fullscreen","setFullscreen","useState","_ref","useRef","handleFullscreenChange","useCallback","event","target","handleFullscreenError","console","error","toggle","current","ref","documentElement","useEffect"],"sources":["/home/mark/Desktop/job/retail/retail/frontend/node_modules/@mantine/hooks/src/use-fullscreen/use-fullscreen.ts"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\n\nfunction getFullscreenElement(): HTMLElement | null {\n  const _document = window.document as any;\n\n  const fullscreenElement =\n    _document.fullscreenElement ||\n    _document.webkitFullscreenElement ||\n    _document.mozFullScreenElement ||\n    _document.msFullscreenElement;\n\n  return fullscreenElement;\n}\n\nasync function exitFullscreen() {\n  const _document = window.document as any;\n\n  if (typeof _document.exitFullscreen === 'function') return _document.exitFullscreen();\n  if (typeof _document.msExitFullscreen === 'function') return _document.msExitFullscreen();\n  if (typeof _document.webkitExitFullscreen === 'function') return _document.webkitExitFullscreen();\n  if (typeof _document.mozCancelFullScreen === 'function') return _document.mozCancelFullScreen();\n\n  return null;\n}\n\nasync function enterFullScreen(element: HTMLElement) {\n  const _element = element as any;\n\n  return (\n    _element.requestFullscreen?.() ||\n    _element.msRequestFullscreen?.() ||\n    _element.webkitEnterFullscreen?.() ||\n    _element.webkitRequestFullscreen?.() ||\n    _element.mozRequestFullscreen?.()\n  );\n}\n\nconst prefixes = ['', 'webkit', 'moz', 'ms'];\n\nfunction addEvents(\n  element: HTMLElement,\n  {\n    onFullScreen,\n    onError,\n  }: { onFullScreen: (event: Event) => void; onError: (event: Event) => void }\n) {\n  prefixes.forEach((prefix) => {\n    element.addEventListener(`${prefix}fullscreenchange`, onFullScreen);\n    element.addEventListener(`${prefix}fullscreenerror`, onError);\n  });\n\n  return () => {\n    prefixes.forEach((prefix) => {\n      element.removeEventListener(`${prefix}fullscreenchange`, onFullScreen);\n      element.removeEventListener(`${prefix}fullscreenerror`, onError);\n    });\n  };\n}\n\nexport function useFullscreen<T extends HTMLElement = any>() {\n  const [fullscreen, setFullscreen] = useState<boolean>(false);\n\n  const _ref = useRef<T>();\n\n  const handleFullscreenChange = useCallback(\n    (event: Event) => {\n      setFullscreen(event.target === getFullscreenElement());\n    },\n    [setFullscreen]\n  );\n\n  const handleFullscreenError = useCallback(\n    (event: Event) => {\n      setFullscreen(false);\n      // eslint-disable-next-line no-console\n      console.error(\n        `[@mantine/hooks] use-fullscreen: Error attempting full-screen mode method: ${event} (${event.target})`\n      );\n    },\n    [setFullscreen]\n  );\n\n  const toggle = useCallback(async () => {\n    if (!getFullscreenElement()) {\n      await enterFullScreen(_ref.current!);\n    } else {\n      await exitFullscreen();\n    }\n  }, []);\n\n  const ref = useCallback((element: T | null) => {\n    if (element === null) {\n      _ref.current = window.document.documentElement as T;\n    } else {\n      _ref.current = element;\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!_ref.current && window.document) {\n      _ref.current = window.document.documentElement as T;\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError,\n      });\n    }\n\n    if (_ref.current) {\n      return addEvents(_ref.current, {\n        onFullScreen: handleFullscreenChange,\n        onError: handleFullscreenError,\n      });\n    }\n\n    return undefined;\n  }, []);\n\n  return { ref, toggle, fullscreen } as const;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}