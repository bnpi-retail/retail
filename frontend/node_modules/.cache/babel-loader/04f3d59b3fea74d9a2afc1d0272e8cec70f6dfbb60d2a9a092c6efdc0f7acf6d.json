{"ast":null,"code":"'use client';\n\nimport React from 'react';\nimport { useId } from '@mantine/hooks';\nimport { getSize, getRadius } from '../../core/utils/get-size/get-size.mjs';\nimport { createVarsResolver } from '../../core/styles-api/create-vars-resolver/create-vars-resolver.mjs';\nimport 'clsx';\nimport { parseThemeColor } from '../../core/MantineProvider/color-functions/parse-theme-color/parse-theme-color.mjs';\nimport { getThemeColor } from '../../core/MantineProvider/color-functions/get-theme-color/get-theme-color.mjs';\nimport { getContrastColor } from '../../core/MantineProvider/color-functions/get-contrast-color/get-contrast-color.mjs';\nimport '../../core/MantineProvider/Mantine.context.mjs';\nimport '../../core/MantineProvider/default-theme.mjs';\nimport '../../core/MantineProvider/MantineProvider.mjs';\nimport '../../core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs';\nimport { useProps } from '../../core/MantineProvider/use-props/use-props.mjs';\nimport { useStyles } from '../../core/styles-api/use-styles/use-styles.mjs';\nimport { extractStyleProps } from '../../core/Box/style-props/extract-style-props/extract-style-props.mjs';\nimport { Box } from '../../core/Box/Box.mjs';\nimport { factory } from '../../core/factory/factory.mjs';\nimport '../../core/DirectionProvider/DirectionProvider.mjs';\nimport { InlineInput } from '../InlineInput/InlineInput.mjs';\nimport { useRadioGroupContext } from './RadioGroup.context.mjs';\nimport { RadioGroup } from './RadioGroup/RadioGroup.mjs';\nimport { RadioIcon } from './RadioIcon.mjs';\nimport classes from './Radio.module.css.mjs';\nconst defaultProps = {\n  labelPosition: \"right\"\n};\nconst varsResolver = createVarsResolver((theme, _ref) => {\n  let {\n    size,\n    radius,\n    color,\n    iconColor,\n    variant,\n    autoContrast\n  } = _ref;\n  const parsedColor = parseThemeColor({\n    color: color || theme.primaryColor,\n    theme\n  });\n  const outlineColor = parsedColor.isThemeColor && parsedColor.shade === void 0 ? \"var(--mantine-color-\".concat(parsedColor.color, \"-outline)\") : parsedColor.color;\n  return {\n    root: {\n      \"--radio-size\": getSize(size, \"radio-size\"),\n      \"--radio-radius\": radius === void 0 ? void 0 : getRadius(radius),\n      \"--radio-color\": variant === \"outline\" ? outlineColor : getThemeColor(color, theme),\n      \"--radio-icon-color\": iconColor ? getThemeColor(iconColor, theme) : autoContrast ? getContrastColor({\n        color,\n        theme\n      }) : void 0,\n      \"--radio-icon-size\": getSize(size, \"radio-icon-size\")\n    }\n  };\n});\nconst Radio = factory((_props, ref) => {\n  var _ctx$size, _rest$name;\n  const props = useProps(\"Radio\", defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    id,\n    size,\n    label,\n    labelPosition,\n    description,\n    error,\n    radius,\n    color,\n    variant,\n    disabled,\n    wrapperProps,\n    icon: Icon = RadioIcon,\n    rootRef,\n    iconColor,\n    onChange,\n    ...others\n  } = props;\n  const getStyles = useStyles({\n    name: \"Radio\",\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver\n  });\n  const ctx = useRadioGroupContext();\n  const contextSize = (_ctx$size = ctx === null || ctx === void 0 ? void 0 : ctx.size) !== null && _ctx$size !== void 0 ? _ctx$size : size;\n  const componentSize = props.size ? size : contextSize;\n  const {\n    styleProps,\n    rest\n  } = extractStyleProps(others);\n  const uuid = useId(id);\n  const contextProps = ctx ? {\n    checked: ctx.value === rest.value,\n    name: (_rest$name = rest.name) !== null && _rest$name !== void 0 ? _rest$name : ctx.name,\n    onChange: event => {\n      ctx.onChange(event);\n      onChange === null || onChange === void 0 || onChange(event);\n    }\n  } : {};\n  return /* @__PURE__ */React.createElement(InlineInput, {\n    ...getStyles(\"root\"),\n    __staticSelector: \"Radio\",\n    __stylesApiProps: props,\n    id: uuid,\n    size: componentSize,\n    labelPosition,\n    label,\n    description,\n    error,\n    disabled,\n    classNames,\n    styles,\n    unstyled,\n    \"data-checked\": contextProps.checked || void 0,\n    variant,\n    ref: rootRef,\n    ...styleProps,\n    ...wrapperProps\n  }, /* @__PURE__ */React.createElement(Box, {\n    ...getStyles(\"inner\"),\n    mod: {\n      \"label-position\": labelPosition\n    }\n  }, /* @__PURE__ */React.createElement(Box, {\n    ...getStyles(\"radio\", {\n      focusable: true,\n      variant\n    }),\n    onChange,\n    ...rest,\n    ...contextProps,\n    component: \"input\",\n    mod: {\n      error: !!error\n    },\n    ref,\n    id: uuid,\n    disabled,\n    type: \"radio\"\n  }), /* @__PURE__ */React.createElement(Icon, {\n    ...getStyles(\"icon\"),\n    \"aria-hidden\": true\n  })));\n});\nRadio.classes = classes;\nRadio.displayName = \"@mantine/core/Radio\";\nRadio.Group = RadioGroup;\nexport { Radio };","map":{"version":3,"names":["defaultProps","labelPosition","varsResolver","createVarsResolver","theme","_ref","size","radius","color","iconColor","variant","autoContrast","parsedColor","parseThemeColor","primaryColor","outlineColor","isThemeColor","shade","concat","root","getSize","getRadius","getThemeColor","getContrastColor","Radio","factory","_props","ref","_ctx$size","_rest$name","props","useProps","classNames","className","style","styles","unstyled","vars","id","label","description","error","disabled","wrapperProps","icon","Icon","RadioIcon","rootRef","onChange","others","getStyles","useStyles","name","classes","ctx","useRadioGroupContext","contextSize","componentSize","styleProps","rest","extractStyleProps","uuid","useId","contextProps","checked","value","event","React","createElement","InlineInput","__staticSelector","__stylesApiProps","Box","mod","focusable","component","type","displayName","Group","RadioGroup"],"sources":["/home/mark/Desktop/job/retail/retail/frontend/node_modules/@mantine/core/src/components/Radio/Radio.tsx"],"sourcesContent":["import React from 'react';\nimport { useId } from '@mantine/hooks';\nimport {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  ElementProps,\n  extractStyleProps,\n  factory,\n  Factory,\n  getContrastColor,\n  getRadius,\n  getSize,\n  getThemeColor,\n  MantineColor,\n  MantineRadius,\n  MantineSize,\n  parseThemeColor,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport { InlineInput, InlineInputStylesNames } from '../InlineInput';\nimport { useRadioGroupContext } from './RadioGroup.context';\nimport { RadioGroup } from './RadioGroup/RadioGroup';\nimport { RadioIcon, RadioIconProps } from './RadioIcon';\nimport classes from './Radio.module.css';\n\nexport type RadioVariant = 'filled' | 'outline';\nexport type RadioStylesNames = InlineInputStylesNames | 'inner' | 'radio' | 'icon';\nexport type RadioCssVariables = {\n  root:\n    | '--radio-size'\n    | '--radio-radius'\n    | '--radio-color'\n    | '--radio-icon-color'\n    | '--radio-icon-size';\n};\n\nexport interface RadioProps\n  extends BoxProps,\n    StylesApiProps<RadioFactory>,\n    ElementProps<'input', 'size'> {\n  /** Content of the `label` associated with the radio */\n  label?: React.ReactNode;\n\n  /** Key of `theme.colors` or any valid CSS color to set input color in checked state, `theme.primaryColor` by default */\n  color?: MantineColor;\n\n  /** Controls size of the component, `'sm'` by default */\n  size?: MantineSize;\n\n  /** A component that replaces default check icon */\n  icon?: React.FC<RadioIconProps>;\n\n  /** Props passed down to the root element */\n  wrapperProps?: Record<string, any>;\n\n  /** Position of the label relative to the input, `'right'` by default */\n  labelPosition?: 'left' | 'right';\n\n  /** Description displayed below the label */\n  description?: React.ReactNode;\n\n  /** Error displayed below the label */\n  error?: React.ReactNode;\n\n  /** Key of `theme.radius` or any valid CSS value to set `border-radius,` \"xl\" by default */\n  radius?: MantineRadius;\n\n  /** Assigns ref of the root element */\n  rootRef?: React.ForwardedRef<HTMLDivElement>;\n\n  /** Key of `theme.colors` or any valid CSS color to set icon color, by default value depends on `theme.autoContrast` */\n  iconColor?: MantineColor;\n\n  /** Determines whether icon color with filled variant should depend on `background-color`. If luminosity of the `color` prop is less than `theme.luminosityThreshold`, then `theme.white` will be used for text color, otherwise `theme.black`. Overrides `theme.autoContrast`. */\n  autoContrast?: boolean;\n}\n\nexport type RadioFactory = Factory<{\n  props: RadioProps;\n  ref: HTMLInputElement;\n  stylesNames: RadioStylesNames;\n  vars: RadioCssVariables;\n  variant: RadioVariant;\n  staticComponents: {\n    Group: typeof RadioGroup;\n  };\n}>;\n\nconst defaultProps: Partial<RadioProps> = {\n  labelPosition: 'right',\n};\n\nconst varsResolver = createVarsResolver<RadioFactory>(\n  (theme, { size, radius, color, iconColor, variant, autoContrast }) => {\n    const parsedColor = parseThemeColor({ color: color || theme.primaryColor, theme });\n    const outlineColor =\n      parsedColor.isThemeColor && parsedColor.shade === undefined\n        ? `var(--mantine-color-${parsedColor.color}-outline)`\n        : parsedColor.color;\n\n    return {\n      root: {\n        '--radio-size': getSize(size, 'radio-size'),\n        '--radio-radius': radius === undefined ? undefined : getRadius(radius),\n        '--radio-color': variant === 'outline' ? outlineColor : getThemeColor(color, theme),\n        '--radio-icon-color': iconColor\n          ? getThemeColor(iconColor, theme)\n          : autoContrast\n            ? getContrastColor({ color, theme })\n            : undefined,\n        '--radio-icon-size': getSize(size, 'radio-icon-size'),\n      },\n    };\n  }\n);\n\nexport const Radio = factory<RadioFactory>((_props, ref) => {\n  const props = useProps('Radio', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    id,\n    size,\n    label,\n    labelPosition,\n    description,\n    error,\n    radius,\n    color,\n    variant,\n    disabled,\n    wrapperProps,\n    icon: Icon = RadioIcon,\n    rootRef,\n    iconColor,\n    onChange,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<RadioFactory>({\n    name: 'Radio',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    vars,\n    varsResolver,\n  });\n\n  const ctx = useRadioGroupContext();\n\n  const contextSize = ctx?.size ?? size;\n  const componentSize = props.size ? size : contextSize;\n\n  const { styleProps, rest } = extractStyleProps(others);\n  const uuid = useId(id);\n\n  const contextProps = ctx\n    ? {\n        checked: ctx.value === rest.value,\n        name: rest.name ?? ctx.name,\n        onChange: (event: React.ChangeEvent<HTMLInputElement>) => {\n          ctx.onChange(event);\n          onChange?.(event);\n        },\n      }\n    : {};\n\n  return (\n    <InlineInput\n      {...getStyles('root')}\n      __staticSelector=\"Radio\"\n      __stylesApiProps={props}\n      id={uuid}\n      size={componentSize}\n      labelPosition={labelPosition}\n      label={label}\n      description={description}\n      error={error}\n      disabled={disabled}\n      classNames={classNames}\n      styles={styles}\n      unstyled={unstyled}\n      data-checked={contextProps.checked || undefined}\n      variant={variant}\n      ref={rootRef}\n      {...styleProps}\n      {...wrapperProps}\n    >\n      <Box {...getStyles('inner')} mod={{ 'label-position': labelPosition }}>\n        <Box\n          {...getStyles('radio', { focusable: true, variant })}\n          onChange={onChange}\n          {...rest}\n          {...contextProps}\n          component=\"input\"\n          mod={{ error: !!error }}\n          ref={ref}\n          id={uuid}\n          disabled={disabled}\n          type=\"radio\"\n        />\n        <Icon {...getStyles('icon')} aria-hidden />\n      </Box>\n    </InlineInput>\n  );\n});\n\nRadio.classes = classes;\nRadio.displayName = '@mantine/core/Radio';\nRadio.Group = RadioGroup;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}